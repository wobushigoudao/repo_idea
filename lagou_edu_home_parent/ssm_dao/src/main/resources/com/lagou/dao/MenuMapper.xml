<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lagou.dao.MenuMapper">

    <resultMap id="menuResult" type="Menu">
        <id column="id" property="id"></id>
        <result column="href" property="href"></result>
        <result column="icon" property="icon"></result>
        <result column="name" property="name"></result>
        <result column="parent_id" property="parentId"></result>
        <result column="description" property="description"></result>
        <result column="orderNum" property="order_num"></result>
        <result column="shown" property="shown"></result>
        <result column="created_time" property="createdTime"></result>
        <result column="updated_time" property="updatedTime"></result>
        <result column="created_by" property="createdBy"></result>
        <result column="updated_by" property="updatedBy"></result>
        <!--
        select若要调用其他配置文件，则需要对应的全路径加上对应标签id，而这里调用自身的对应标签id
        那么就不需要对应全路径了，可以直接写上对应标签id，使得调用对应sql语句的执行
        这是之所以使用findSubMenuListByPid，是因为对应sql语句是一样的
        -->
        <collection property="subMenuList" ofType="Menu" select="findSubMenuListByPid" column="id">
            <!--这个id使得下面的参数是需要变化的，也就是说不能直接写-1了-->
        </collection>
    </resultMap>

    <!--查询所有父子菜单信息-->
    <select id="findSubMenuListByPid" parameterType="int" resultMap="menuResult">
        select *
        from menu
        where parent_id = #{id} order by order_num
        <!--这里将排序字段进行排序一下-->
    </select>

    <!--
    从上面我们可以发现，当一个表自己进行联系时，通常都是跟某个字段进行联系，该字段我称之为内部外键
    而这个字段就是导致进行嵌套查询的主要操作，而其他的表的外键，则可以称之为外部外键
    我们发现无论是判断还是查询，都是这个内部外键进行主要作用，这是因为他既可以得到对应不同的菜单，也可以得到对应菜单中有哪些菜单
    即在创建表的时候，就赋予了他数据的作用了，一部分当成主要数据（顶部菜单），一部分与主键联系，当成对应的子菜单
    所有说，内部外键在创建的时候，基本就会需要嵌套查询了，且对应语句一样，这是数据的作用
    -->

    <!-- 根据角色id查询该角色的菜单信息id-->

    <select id="findMenuByRoleId" parameterType="int" resultType="int">
        SELECT m.id
        FROM roles r
                 INNER JOIN role_menu_relation rl ON r.id = rl.role_id
                 INNER JOIN menu m ON m.id = rl.menu_id
        WHERE r.id = #{id}
    </select>

    <!--
    根据roleid清空中间表的关联关系
     -->
    <delete id="deleteRoleContextMenu" parameterType="int">
        DELETE
        FROM role_menu_relation
        WHERE role_id = #{id}
    </delete>

    <!--
    为角色分配菜单
    -->

    <insert id="roleContextMenu" parameterType="Role_menu_relation">
        insert into role_menu_relation
        values (null, #{menuId}, #{roleId},
                #{createdTime}, #{updatedTime}, #{createdBy}, #{updatedby})
    </insert>

    <!--
    查询所有菜单列表
    -->
    <select id="findAllMenu" resultType="Menu">
        select *
        from menu;
    </select>


    <!--根据id查询菜单信息-->
    <select id="findMenuById" parameterType="int" resultType="Menu">
        select *
        from menu
        where id = #{id}
    </select>

    <!--添加菜单-->
    <insert id="saveMenu" parameterType="Menu">
        insert into menu
        values (null, #{parentId}, #{href}, #{icon}, #{name}, #{description}, #{orderNum},
                #{shown}, #{level}, #{createdTime}, #{updatedTime},
                #{createdBy}, #{updatedBy})
    </insert>

    <!--修改菜单-->
    <update id="updateMenu" parameterType="Menu">
        update menu
        <trim prefix="SET" suffixOverrides=",">
            <if test="parentId != 0">
                parent_id = #{parentId},
            </if>
            <if test="href != null and href != ''">
                href = #{href},
            </if>
            <if test="icon != null and icon != ''">
                icon = #{icon},
            </if>
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="orderNum != 0">
                order_num = #{orderNum},
            </if>
            <if test="shown != 0">
                shown = #{shown},
            </if>
            <if test="level != 0">
                level = #{level},
            </if>
            <if test="createdTime != null">
                created_time = #{createdTime},
            </if>
            <if test="updatedTime != null">
                updated_time = #{updatedTime},
            </if>
            <if test="createdBy != null and createdBy != ''">
                created_by = #{createdBy},
            </if>
            <if test="updatedBy != null and updatedBy != ''">
                updated_by = #{updatedBy}
            </if>

        </trim>
        <where>
            <if test="id != null">
                id = #{id}
            </if>
        </where>

    </update>
    <!--这里说明一下：对应替换（如#{},上面动态sql的对应字段），是使用get方法，若没有get方法则直接赋值
        且无论是get后面名称还是直接赋值，首字母大小写忽略
        其中在进行动态sql替换时，若是Date类型，由于没有方法可以变成字符串（不像其他基本数据类型一样可以变成字符串）
        那么只能直接替换，所以在进行判断时，对应的判断是不能出现的，如上面的updatedTime != null不能是
        如上面的updatedTime != null and updatedTime != ''，后面的''判断不能加上，因为Date不可以判断字符串
        因为不是一个类型，所以会出现判断错误，即500服务器内部报错，出现invalid comparison: java.util.Date and java.lang.String
        而Date在进行#{}替换时，则会被框架解析成对应字符串，默认是yyyy-MM-dd HH:mm:ss的解析
        所以可以传递Date到sql语句里面，因为底层帮我们操作了
        -->

    <!--删除菜单-->
    <delete id="deleteMenu" parameterType="int">
        delete from menu where id = #{id}
    </delete>
</mapper>